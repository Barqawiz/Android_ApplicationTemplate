package com.iaraby.template.view;

import java.io.IOException;

import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;

import com.company.appname.R;
import com.iaraby.db.helper.Config;
import com.iaraby.db.helper.Util;
import com.iaraby.template.control.Notifier;
import com.iaraby.template.data.Constants;
import com.iaraby.template.data.FavoriteManager;
import com.iaraby.template.data.Preferences;
import com.iaraby.template.data.MyDataAdapter;
import com.iaraby.template.view.fragment.DetailsFrag;
import com.iaraby.template.view.fragment.ListFrag;
import com.iaraby.utility.LogManager;
import com.iaraby.utility.Utility;

public class Master_Activity extends FragmentActivity implements Notifier {

	private int currentPage;
	private boolean isDual;
	// views
	private Menu menu;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setContentView(R.layout.activity_master_);
		// **Initial
		this.currentPage = Constants.EMPTY_INT;
		initialDatabase();
		int landThreshold = (int) getResources().getDimension(R.dimen.is_land);
		if (landThreshold > 0)
			this.isDual = true;

		// **UI
		if (Preferences.getInstance(this).isRTL() && isDual) {
			setContentView(R.layout.activity_master_right);
		} else {
			setContentView(R.layout.activity_master_);
		}

		// **Process
		if (savedInstanceState == null) {
			getSupportFragmentManager()
					.beginTransaction()
					.add(R.id.list_container,
							ListFrag.createInstance(this.isDual)).commit();
		} else {
			this.currentPage = savedInstanceState.getInt(
					Constants.PARAM_SEL_PAGE_TAG, this.currentPage);
		} // check instance status

	}

	private void initialDatabase() {
		if (!MyDataAdapter.getInstance().isOpen()) {
			Config config = new Config("data.sqlite", 1, this);
			try {
				MyDataAdapter.getInstance().open(config);
			} catch (IOException e) {
				LogManager.getIns().ee(getString(R.string.app_name),
						"Error openning database: " + e.toString());
			} // try to open the database
		} // check if database opened or not
	} // method: initial the database to be ready for operations

	@Override
	public void onBackPressed() {
		if (!this.isDual && findViewById(R.id.container) != null) {

			if (findViewById(R.id.content_container).getVisibility() == View.VISIBLE) {
				// if one view and current visible is details back to list
				activeList();
			} else {
				super.onBackPressed();
			} // check which view is visible
		} else {
			// for dual view always processed with on back
			super.onBackPressed();
		} // check if dual views or one view
	} // Method: handle on back pressed

	public void onSaveInstanceState(Bundle outState) {
		outState.putInt(Constants.PARAM_SEL_PAGE_TAG, this.currentPage);
		super.onSaveInstanceState(outState);
	}

	// ** Notify Methods
	@Override
	public void setDetails(int position, long id) {
		getSupportFragmentManager()
				.beginTransaction()
				.replace(R.id.content_container,
						DetailsFrag.createInstance(position, id)).commit();
		this.currentPage = Constants.DETAILS_PAGE;
	} // method: set details for selected position in the list

	public void activeList() {
		findViewById(R.id.content_container).setVisibility(View.GONE);
		findViewById(R.id.list_container).setVisibility(View.VISIBLE);
		setTitle(getString(R.string.title_activity_master_));
		this.currentPage = Constants.LIST_PAGE;
		setMneuVisibility(false);
	}

	public void activeDetails() {
		findViewById(R.id.content_container).setVisibility(View.VISIBLE);
		findViewById(R.id.list_container).setVisibility(View.GONE);
		this.currentPage = Constants.DETAILS_PAGE;
		setMneuVisibility(true);
	}

	public void setTitle(String title) {
		getActionBar().setTitle(title);
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public DetailsFrag getDetailsFrag() {
		DetailsFrag detailsFrag = (DetailsFrag) getSupportFragmentManager()
				.findFragmentById(R.id.content_container);
		return detailsFrag;
	}

	public void updateFavButton(long selectedId) {
		if (menu != null) {
			MenuItem favItem = menu.findItem(R.id.action_fav);
			if (FavoriteManager.getInstance(this).isFav(selectedId)) {
				favItem.setTitle(getString(R.string.action_fav));
				favItem.setIcon(R.drawable.menu_item_fav);
			} else {
				favItem.setTitle(getString(R.string.action_not_fav));
				favItem.setIcon(R.drawable.menu_item_not_fav);
			} // check if selected item favorite or not
		} // make sure menu item not null
	} // method: update favorite menu item

	/* Menu items */
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.master_, menu);
		//this.menu = menu;
		
		return true;
	}

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		this.menu = menu;
		
		// control menu visibility
		if (isDual || this.currentPage == Constants.DETAILS_PAGE)
			setMneuVisibility(true);
		else if (this.currentPage == Constants.LIST_PAGE)
			setMneuVisibility(false);
		//update action button status
		DetailsFrag frag = getDetailsFrag();
		if (frag != null) {
			
		}
		return super.onPrepareOptionsMenu(menu);
	}

	public boolean onOptionsItemSelected(MenuItem item) {
		DetailsFrag frag = getDetailsFrag();
		if (frag != null ) {
			int id = item.getItemId();
			if (id == R.id.action_share) {
				frag.shareCurrent();
			} else if (id == R.id.action_fav) {
				long selectedID = frag.handleFavAction();
				updateFavButton(selectedID);
			} // check selected menu item
		}
		return super.onOptionsItemSelected(item);
	}

	private void setMneuVisibility(boolean isVisible) {
		if (menu != null) {
			menu.findItem(R.id.action_fav).setVisible(isVisible);
			menu.findItem(R.id.action_share).setVisible(isVisible);
		}
	} // method: set menu v
}
