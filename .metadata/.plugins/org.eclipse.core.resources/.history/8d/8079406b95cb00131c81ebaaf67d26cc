package com.iaraby.template.data;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import com.iaraby.template.control.FavGarbagCollector;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;

/**
 * Shared preferences manager to store favorite fields IDs and manage the
 * required queries to get the favorite from the database and restore the fields
 * for new database versions
 * 
 * @author Barqawiz
 * 
 */
public class FavoriteManager {
	private Context context;
	private static FavoriteManager instance;

	private SharedPreferences preferences;

	public static FavoriteManager getInstance(Context context) {
		if (instance == null)
			instance = new FavoriteManager(context);
		return instance;
	} // method: get instance

	private FavoriteManager(Context context) {
		preferences = context.getSharedPreferences("FavoriteManager", 0/*
																		 * private
																		 * mode
																		 */);
		this.context = context;
	} // constructor

	public boolean addToFav(long id) {
		boolean res = true;

		if (preferences.getString(FAV_LIST_TAG + id, null) == null) {
			preferences.edit().putString(FAV_LIST_TAG + id, id + "").commit();
		}

		return res;
	}

	public boolean removeFav(long id) {
		boolean res = true;

		if (preferences.getString(FAV_LIST_TAG + id, null) != null) {
			preferences.edit().remove(FAV_LIST_TAG + id).commit();
		}

		return res;
	}

	public boolean isFav(long id) {
		return (preferences.getString(FAV_LIST_TAG + id, null) != null);
	}

	public void clear() {
		preferences.edit().clear().commit();
	}

	public Collection<String> getFavSet() {
		Map<String, String> items = preferences.getAll();
		
		return (Collection<String>) preferences.getAll().values();
	}

	public Set<String> geKeysSet() {

		return preferences.getAll().keySet();
	}

	public int countFav() {
		return preferences.getAll().size();
	}

	public boolean isFavItemInDatabase(long id) throws IllegalAccessError {
		boolean res = false;
		if (MyDataAdapter.getInstance().isOpen()) {
			Cursor cursor = MyDataAdapter.getInstance().getContentItem(id);
			if (cursor.moveToFirst())
				return true;
		} else {
			throw new IllegalAccessError(
					"Database adapter not open, make sure you called MyDataAdapter.getInstance().open(config); at least once");
		} // check if the database is opened
		return res;
	}

	/* preferences operations variables */
	private static String FAV_LIST_TAG = "FAV_LIST";

	public Cursor getFavCursor() throws IllegalAccessError {
		if (!MyDataAdapter.getInstance().isOpen())
			throw new IllegalAccessError(
					"Database adapter not open, make sure you called MyDataAdapter.getInstance().open(config); at least once");
		int numFav = countFav();
		if (numFav == 0)
			return null;

		String cols[] = { Beans.Content.COL_ID, Beans.Content.COL_TITLE,
				Beans.Content.COL_CONTENT, Beans.Content.COL_IMAGE };
		String selection = null;
		String where[] = new String[numFav];
		int index = 0;
		Collection<String> collection = getFavSet();
		for (String id : collection) {
			if (selection == null) {
				selection = Beans.Content.COL_ID + " = ? ";
			} else {
				selection += " OR " + Beans.Content.COL_ID + " = ? ";
			}
			where[index] = id;
			index++;
		} // loop on all values

		Cursor cursor = MyDataAdapter.getInstance().fetchDataWhere(
				Beans.Content.TABLE_NAME, selection, where, null, cols);

		return cursor;
	}

	/**
	 * This method to call a service that check the favorite list with the new
	 * data and delete favorite id's that does not exist in database
	 */
	public void maintainFavChange(int dataVerion) {
		//validate
		if (!MyDataAdapter.getInstance().isOpen())
			return;
		
		//process
		int numFav = countFav();
		if (numFav == 0) {
			FavGarbagCollector.clearVersion(context, dataVerion);
			return;
		}
		Collection<String> favCollection = getFavSet();
		ArrayList<String> favList = new ArrayList<String>(favCollection);
		
		Intent intent = new Intent(context, FavGarbagCollector.class);
		intent.putStringArrayListExtra(Constants.PARAM_FAV_LIST, favList);
		intent.putExtra(Constants.PARAM_FAV_VER, dataVerion);
		
		context.startService(intent); 
	}
} // class
